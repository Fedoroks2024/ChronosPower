/*
 * ChronosPower v2.5 - –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
 * - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é callback —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
 * - –¢–µ–ø–ª–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞—â–∏—Ç—É
 */

#include <ChronosPower.h>

using namespace ChronosPower;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
uint32_t totalMeasurements = 0;
uint32_t highPowerEvents = 0;
uint32_t thermalEvents = 0;
float maxTemperature = 0;
uint16_t minBatteryLevel = 100;

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    Serial.println("ChronosPower - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è");
    Serial.println("==========================================");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    CPower().begin(PowerProfile::ADAPTIVE_BATTERY_LIFE);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback —Ñ—É–Ω–∫—Ü–∏–π
    setupCallbacks();
    
    Serial.println("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    Serial.println("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è...\n");
}

void loop() {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
    simulateWorkload();
    
    // –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    static uint32_t lastStatsTime = 0;
    if (millis() - lastStatsTime > 10000) {
        showStatistics();
        lastStatsTime = millis();
    }
    
    delay(1000);
}

void setupCallbacks() {
    Serial.println("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π...");
    
    // Callback –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–Ω–µ—Ä–≥–∏–∏
    CPower().registerEnergyCallback([](const EnergyMetrics& metrics) {
        totalMeasurements++;
        
        Serial.println("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏:");
        Serial.println("  –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " + String(metrics.currentConsumptionMicroAmps) + " –º–∫–ê");
        Serial.println("  –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " + String(metrics.averageConsumptionMicroAmps) + " –º–∫–ê");
        Serial.println("  –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " + String(metrics.peakConsumptionMicroAmps) + " –º–∫–ê");
        Serial.println("  –£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏: " + String(metrics.batteryPercentage) + "%");
        Serial.println("  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(metrics.uptimeSeconds) + " —Å–µ–∫");
        Serial.println("  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + String(metrics.powerEfficiencyPercent) + "%");
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–∞—Ç–∞—Ä–µ–∏
        if (metrics.batteryPercentage < minBatteryLevel) {
            minBatteryLevel = metrics.batteryPercentage;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        if (metrics.currentConsumptionMicroAmps > 50000) { // –ë–æ–ª–µ–µ 50 –º–ê
            highPowerEvents++;
            Serial.println("  ‚ö†Ô∏è –í–´–°–û–ö–û–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!");
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏
            if (metrics.batteryPercentage < 30) {
                Serial.println("  üîã –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏");
                CPower().setProfile(PowerProfile::ULTRA_LOW_POWER);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞
        if (metrics.batteryPercentage < 10) {
            Serial.println("  üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ô –ó–ê–†–Ø–î –ë–ê–¢–ê–†–ï–ò!");
            Serial.println("  –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º");
            CPower().setProfile(PowerProfile::ULTRA_LOW_POWER);
            
            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–π –Ω–µ–Ω—É–∂–Ω–æ–π –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏
            CPower().controlDomain(PowerDomain::COMMUNICATIONS, false);
            CPower().controlDomain(PowerDomain::ANALOG_SUBSYSTEM, false);
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if (metrics.powerEfficiencyPercent < 50) {
            Serial.println("  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é");
        }
    });
    
    // Callback –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    CPower().registerThermalCallback([](const ThermalMetrics& thermal) {
        thermalEvents++;
        
        Serial.println("\nüå°Ô∏è –¢–µ–ø–ª–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:");
        Serial.println("  –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(thermal.currentTemperatureCelsius) + "¬∞C");
        Serial.println("  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(thermal.maxTemperatureCelsius) + "¬∞C");
        Serial.println("  –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(thermal.averageTemperatureCelsius) + "¬∞C");
        Serial.println("  –¢–µ–ø–ª–æ–≤–∞—è –∑–æ–Ω–∞: " + String(thermal.thermalZone));
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if (thermal.currentTemperatureCelsius > maxTemperature) {
            maxTemperature = thermal.currentTemperatureCelsius;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
        if (thermal.currentTemperatureCelsius > 70) {
            Serial.println("  üî• –í–´–°–û–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!");
            
            if (thermal.thermalThrottlingActive) {
                Serial.println("  ‚ùÑÔ∏è –¢–µ–ø–ª–æ–≤–æ–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (—É—Ä–æ–≤–µ–Ω—å " + 
                              String(thermal.thermalThrottlingLevel) + ")");
            } else {
                Serial.println("  ‚ùÑÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–≥–æ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞");
                CPower().optimizeForThermal();
            }
        }
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        if (thermal.currentTemperatureCelsius > 85) {
            Serial.println("  üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê!");
            Serial.println("  –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
            CPower().setProfile(PowerProfile::ULTRA_LOW_POWER);
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if (thermal.currentTemperatureCelsius < 60 && thermal.thermalThrottlingActive) {
            Serial.println("  ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å");
        }
    });
    
    // Callback –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    CPower().registerWakeupCallback([](WakeupReason reason) {
        Serial.println("\n‚è∞ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ:");
        Serial.println("  –ü—Ä–∏—á–∏–Ω–∞: " + wakeupReasonToString(reason));
        Serial.println("  –í—Ä–µ–º—è: " + String(millis()) + " –º—Å");
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        switch (reason) {
            case WakeupReason::RTC_ALARM_SECONDS:
                Serial.println("  üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ");
                break;
            case WakeupReason::EXTERNAL_PIN_2:
                Serial.println("  üëÜ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏");
                break;
            case WakeupReason::THERMAL_WARNING_HIGH:
                Serial.println("  üå°Ô∏è –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
                break;
            case WakeupReason::BATTERY_LOW:
                Serial.println("  üîã –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞");
                break;
            default:
                Serial.println("  ‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ");
                break;
        }
    });
    
    Serial.println("‚úÖ Callback —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
}

void simulateWorkload() {
    static uint8_t workloadCycle = 0;
    workloadCycle++;
    
    switch (workloadCycle % 6) {
        case 0:
            // –†–µ–∂–∏–º –ø—Ä–æ—Å—Ç–æ—è
            Serial.println("\nüí§ –†–µ–∂–∏–º –ø—Ä–æ—Å—Ç–æ—è");
            CPower().setProfile(PowerProfile::LOW_POWER_ACTIVE);
            delay(2000);
            break;
            
        case 1:
            // –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            Serial.println("\n‚ö° –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞");
            CPower().setProfile(PowerProfile::BALANCED_MOBILE);
            for (int i = 0; i < 1000; i++) {
                volatile int dummy = i * i;
            }
            break;
            
        case 2:
            // –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
            Serial.println("\nüî• –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞");
            CPower().setProfile(PowerProfile::HIGH_PERFORMANCE);
            for (int i = 0; i < 10000; i++) {
                volatile float dummy = sin(i * 0.01);
            }
            break;
            
        case 3:
            // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            Serial.println("\nüöÄ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞");
            CPower().setProfile(PowerProfile::MAX_PERFORMANCE);
            for (int i = 0; i < 50000; i++) {
                volatile double dummy = sqrt(i) * log(i + 1);
            }
            break;
            
        case 4:
            // –¢–µ—Å—Ç –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏
            Serial.println("\nüîå –¢–µ—Å—Ç –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏");
            CPower().control(Peripheral::ADC_0_12BIT, true);
            CPower().control(Peripheral::SPI_0, true);
            CPower().control(Peripheral::I2C_0, true);
            
            // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏—Ñ–µ—Ä–∏–µ–π
            for (int i = 0; i < 100; i++) {
                analogRead(A0);
                delay(10);
            }
            
            CPower().control(Peripheral::SPI_0, false);
            CPower().control(Peripheral::I2C_0, false);
            break;
            
        case 5:
            // –¢–µ—Å—Ç —Å–Ω–∞
            Serial.println("\nüò¥ –¢–µ—Å—Ç —Å–Ω–∞");
            Serial.println("–ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã...");
            sleepFor(3000);
            break;
    }
}

void showStatistics() {
    Serial.println("\n" + String('=', 50));
    Serial.println("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê");
    Serial.println(String('=', 50));
    
    // –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    EnergyMetrics energy = CPower().getEnergyMetrics();
    ThermalMetrics thermal = CPower().getThermalMetrics();
    PerformanceMetrics perf = CPower().getPerformanceMetrics();
    
    Serial.println("üîã –≠–ù–ï–†–ì–ò–Ø:");
    Serial.println("  –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " + String(energy.currentConsumptionMicroAmps) + " –º–∫–ê");
    Serial.println("  –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " + String(energy.averageConsumptionMicroAmps) + " –º–∫–ê");
    Serial.println("  –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " + String(energy.peakConsumptionMicroAmps) + " –º–∫–ê");
    Serial.println("  –£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏: " + String(energy.batteryPercentage) + "%");
    Serial.println("  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: " + String(minBatteryLevel) + "%");
    Serial.println("  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + String(energy.powerEfficiencyPercent) + "%");
    
    Serial.println("\nüå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:");
    Serial.println("  –¢–µ–∫—É—â–∞—è: " + String(thermal.currentTemperatureCelsius) + "¬∞C");
    Serial.println("  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞ —Å–µ—Å—Å–∏—é: " + String(maxTemperature) + "¬∞C");
    Serial.println("  –°—Ä–µ–¥–Ω—è—è: " + String(thermal.averageTemperatureCelsius) + "¬∞C");
    Serial.println("  –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥: " + String(thermal.thermalThrottlingActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"));
    
    Serial.println("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:");
    Serial.println("  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: " + String(perf.cpuUtilizationPercent) + "%");
    Serial.println("  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: " + String(perf.memoryUtilizationPercent) + "%");
    Serial.println("  –ß–∞—Å—Ç–æ—Ç–∞ CPU: " + String(CPower().getCpuFrequency()) + " –ì—Ü");
    Serial.println("  –ü—Ä–æ—Ñ–∏–ª—å: " + profileToString(CPower().getProfile()));
    
    Serial.println("\nüìä –°–û–ë–´–¢–ò–Ø:");
    Serial.println("  –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: " + String(totalMeasurements));
    Serial.println("  –°–æ–±—ã—Ç–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: " + String(highPowerEvents));
    Serial.println("  –¢–µ–ø–ª–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: " + String(thermalEvents));
    Serial.println("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π: " + String(energy.wakeupCount));
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç –±–∞—Ç–∞—Ä–µ–∏
    if (energy.currentConsumptionMicroAmps > 0) {
        float batteryCapacityMah = 2000.0; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–∞—Ç–∞—Ä–µ—é 2000 –º–ê—á
        float currentMa = energy.currentConsumptionMicroAmps / 1000.0;
        float estimatedHours = (batteryCapacityMah * energy.batteryPercentage / 100.0) / currentMa;
        
        Serial.println("\n‚è±Ô∏è –ü–†–û–ì–ù–û–ó:");
        Serial.println("  –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(estimatedHours, 1) + " —á–∞—Å–æ–≤");
        
        if (estimatedHours < 1.0) {
            Serial.println("  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ–Ω–µ–µ —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã!");
        } else if (estimatedHours > 24.0) {
            Serial.println("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å!");
        }
    }
    
    Serial.println(String('=', 50));
}

String profileToString(PowerProfile profile) {
    switch (profile) {
        case PowerProfile::MAX_PERFORMANCE: return "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å";
        case PowerProfile::HIGH_PERFORMANCE: return "–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å";
        case PowerProfile::BALANCED_MOBILE: return "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π";
        case PowerProfile::LOW_POWER_ACTIVE: return "–ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ";
        case PowerProfile::ULTRA_LOW_POWER: return "–£–ª—å—Ç—Ä–∞–Ω–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ";
        case PowerProfile::ADAPTIVE_BATTERY_LIFE: return "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è";
        default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    }
}

String wakeupReasonToString(WakeupReason reason) {
    switch (reason) {
        case WakeupReason::RTC_ALARM_SECONDS: return "–¢–∞–π–º–µ—Ä RTC";
        case WakeupReason::EXTERNAL_PIN_2: return "–í–Ω–µ—à–Ω–∏–π –ø–∏–Ω";
        case WakeupReason::TOUCH_SENSOR_GLOBAL: return "–°–µ–Ω—Å–æ—Ä –∫–∞—Å–∞–Ω–∏—è";
        case WakeupReason::WATCHDOG_TIMEOUT_INTERRUPT: return "Watchdog";
        case WakeupReason::THERMAL_WARNING_HIGH: return "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞";
        case WakeupReason::BATTERY_LOW: return "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥";
        default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è";
    }
}
